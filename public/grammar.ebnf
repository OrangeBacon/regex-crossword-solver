// This grammar is adapted from:
// https://github.com/kean/Regex/blob/master/grammar.ebnf

Regex ::= StartOfStringAnchor? Expression

Expression ::= Subexpression ("|" Expression)?

/* Anything that can be on one side of the alternation. */
Subexpression ::= SubexpressionItem+
SubexpressionItem
	::= Match
	  | Group
	  | Anchor
	  | Backreference
	

/* Grouping Constructs 
------------------------------------------------------------------*/

Group ::= "(" GroupModifier? Expression ")" Quantifier?
GroupModifier
  ::= GroupLookaheadModifier
    | GroupNegativeLookaheadModifier

GroupLookaheadModifier ::= "?="
GroupNegativeLookaheadModifier ::= "?!"

/* Match
------------------------------------------------------------------*/

Match ::= MatchItem Quantifier?

MatchItem
	::= MatchAnyCharacter
	  | MatchCharacterClass
	  | MatchCharacter

MatchAnyCharacter ::= "."

MatchCharacterClass
	::= CharacterGroup
	  | CharacterClass

MatchCharacter ::= Char

/* Character Classes
------------------------------------------------------------------*/

CharacterGroup ::= "[" CharacterGroupNegativeModifier? CharacterGroupItem+ "]"

CharacterGroupNegativeModifier ::= "^"
CharacterGroupItem
	::= CharacterClass
	  | CharacterRange
	  | Char /* excluding ] */

CharacterClass
	::= CharacterClassAnyWord
	  | CharacterClassAnyWordInverted
	  | CharacterClassAnyDecimalDigit
	  | CharacterClassAnyDecimalDigitInverted
    | CharacterClassAnyWhitespace
    | CharacterClassAnyWhitespaceInverted
    | CharacterClassEscapes

CharacterClassAnyWord ::= "\w"
CharacterClassAnyWordInverted ::= "\W"
CharacterClassAnyDecimalDigit ::= "\d"
CharacterClassAnyDecimalDigitInverted ::= "\D"
CharacterClassAnyWhitespace ::= "\s"
CharacterClassAnyWhitespaceInverted ::= "\S"
CharacterClassEscapes
  ::= "\0"
    | "\n"
    | "\("
    | "\)"
    | "\["
    | "\]"
    | "\."
    | "\*"
    | "\+"
    | "\?"
    | "\-"
    | "\|"
    | "\^"
    | "\\"
    | "\$"

CharacterRange ::= Char ("-" Char)?

/* Quantifiers 
------------------------------------------------------------------*/

Quantifier ::= QuantifierType
QuantifierType
	::= ZeroOrMoreQuantifier
	  | OneOrMoreQuantifier
	  | ZeroOrOneQuantifier
	  | RangeQuantifier

ZeroOrMoreQuantifier ::= "*"
OneOrMoreQuantifier ::= "+"
ZeroOrOneQuantifier ::= "?"

RangeQuantifier ::= "{" RangeQuantifierLowerBound ( "," RangeQuantifierUpperBound? )? "}"
RangeQuantifierLowerBound ::= Integer
RangeQuantifierUpperBound ::= Integer

/* Backreferences
------------------------------------------------------------------*/

Backreference ::= "\" Integer

/* Anchors
------------------------------------------------------------------*/

StartOfStringAnchor ::= "^"

Anchor
	::= AnchorBoundary
	  | AnchorNonBoundary
	  | AnchorEndOfString

AnchorBoundary ::= "\b"
AnchorNonBoundary ::= "\B"
AnchorEndOfString ::= "$"

/* Misc
------------------------------------------------------------------*/

Integer ::= [0-9]+
Letters ::= [a-zA-Z]+
Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]